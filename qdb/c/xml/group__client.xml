<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__client" kind="group">
    <compoundname>client</compoundname>
    <title>General client functions</title>
    <innerclass refid="structqdb__timespec__t" prot="public">qdb_timespec_t</innerclass>
    <innerclass refid="structqdb__remote__node__t" prot="public">qdb_remote_node_t</innerclass>
    <innerclass refid="structqdb__id__t" prot="public">qdb_id_t</innerclass>
    <innerclass refid="structqdb__entry__metadata__t" prot="public">qdb_entry_metadata_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__client_1ga14ba3138099f3c7969f707eb4b16c35b" prot="public" static="no">
        <name>qdb_limits</name>
        <enumvalue id="group__client_1gga14ba3138099f3c7969f707eb4b16c35ba5f7b5e1be562cf9e9bf141b7cba12fcf" prot="public">
          <name>qdb_l_max_alias_length</name>
          <initializer>= 1024</initializer>
          <briefdescription>
<para>The maximum allowed length for aliases. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__client_1gga14ba3138099f3c7969f707eb4b16c35bada77b67d62cfd28f8f9131dc039dbf64" prot="public">
          <name>qdb_l_alias_max_length</name>
          <initializer>= qdb_l_max_alias_length</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please use <ref refid="group__client_1gga14ba3138099f3c7969f707eb4b16c35ba5f7b5e1be562cf9e9bf141b7cba12fcf" kindref="member">qdb_l_max_alias_length</ref>. </para></xrefdescription></xrefsect></para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__client_1gga14ba3138099f3c7969f707eb4b16c35bab0110b72ff3e263a9de652302b75ef2d" prot="public">
          <name>qdb_l_max_user_name_length</name>
          <initializer>= 120</initializer>
          <briefdescription>
<para>The maximum allowed length of a user name. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__client_1gga14ba3138099f3c7969f707eb4b16c35ba65747a0c116aae149366cd8eb6ec05e7" prot="public">
          <name>qdb_max_user_name_length</name>
          <initializer>= qdb_l_max_user_name_length</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please use <ref refid="group__client_1gga14ba3138099f3c7969f707eb4b16c35bab0110b72ff3e263a9de652302b75ef2d" kindref="member">qdb_l_max_user_name_length</ref>. </para></xrefdescription></xrefsect></para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration of API limits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="127" column="1" bodyfile="qdb/client.h" bodystart="126" bodyend="136"/>
      </memberdef>
      <memberdef kind="enum" id="group__client_1gabbff9df8f8af25c6bdf97cabd157910b" prot="public" static="no">
        <name>qdb_protocol_t</name>
        <enumvalue id="client_8h_1gabbff9df8f8af25c6bdf97cabd157910ba2ce2bdabaf83de1269519c5ddec8d71b" prot="public">
          <name>qdb_p_tcp</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Uses TCP/IP to communicate with the cluster. This is currently the only supported network protocol. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration of allowed network protocols. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="143" column="1" bodyfile="qdb/client.h" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="enum" id="group__client_1gaaa6272f78edda811822bfce05a07f944" prot="public" static="no">
        <name>qdb_entry_type_t</name>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944a696fbb89655c7dd32c7a7e75b8681bcf" prot="public">
          <name>qdb_entry_uninitialized</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Uninitialized value. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944ace9c26f51f6c16e8ddbc3f28186ab651" prot="public">
          <name>qdb_entry_blob</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Binary large object (blob). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944a15e8fce791e52b1d141523cd57535f36" prot="public">
          <name>qdb_entry_integer</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Signed 64-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944a0151c74b116bcf742d486f31e1875688" prot="public">
          <name>qdb_entry_hset</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Distributed hash set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944a314adddcdc6c99386a4aaa52d2607a1a" prot="public">
          <name>qdb_entry_tag</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Tag. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944a9d5a0e0781bef6833f2520af9614aef3" prot="public">
          <name>qdb_entry_deque</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Distributed double-entry queue (deque). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944ae5094abbbeb67d245fb26cd935e3eb4a" prot="public">
          <name>qdb_entry_stream</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Distributed binary stream. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gaaa6272f78edda811822bfce05a07f944a7f19bbb0e69b4eb2e263ef47a30e7869" prot="public">
          <name>qdb_entry_ts</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>Distributed time series. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A enumeration representing possible entries type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="215" column="1" bodyfile="qdb/client.h" bodystart="214" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__client_1gab4ebb56cb273c43a023726f6adea5f9c" prot="public" static="no">
        <type>enum <ref refid="group__client_1ga14ba3138099f3c7969f707eb4b16c35b" kindref="member">qdb_limits</ref></type>
        <definition>typedef enum qdb_limits  qdb_limits_t</definition>
        <argsstring></argsstring>
        <name>qdb_limits_t</name>
        <briefdescription>
<para>An enumeration of API limits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga4745ed10b405291a321ec7150368a4b1" prot="public" static="no">
        <type>time_t</type>
        <definition>qdb_time_t</definition>
        <argsstring></argsstring>
        <name>qdb_time_t</name>
        <briefdescription>
<para>A cross-platform type that represents a time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref> </para></simplesect>
<simplesect kind="remark"><para><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> MUST be 64-bit large. The API will probably not link otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="89" column="1" bodyfile="qdb/client.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga2b6f368592c49501d41ec2330b964147" prot="public" static="no">
        <type>size_t</type>
        <definition>qdb_size_t</definition>
        <argsstring></argsstring>
        <name>qdb_size_t</name>
        <briefdescription>
<para>An alias for size_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="95" column="1" bodyfile="qdb/client.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga17492cb84da5466d0c742f0561df6597" prot="public" static="no">
        <type>int64_t</type>
        <definition>qdb_int_t</definition>
        <argsstring></argsstring>
        <name>qdb_int_t</name>
        <briefdescription>
<para>A cross-platform type that represents a signed 64-bit integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="105" column="1" bodyfile="qdb/client.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga720fb72da4197685cc354214e96796c1" prot="public" static="no">
        <type>struct qdb_handle_internal *</type>
        <definition>qdb_handle_t</definition>
        <argsstring></argsstring>
        <name>qdb_handle_t</name>
        <briefdescription>
<para>An opaque handle to internal API-allocated structures needed for maintaining connection to a cluster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="153" column="1" bodyfile="qdb/client.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__client_1gab0ffd6b2788132113bf3152d2d8bb329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> const char *</type>
        <definition>QDB_API_LINKAGE const char* qdb_version</definition>
        <argsstring>(void)</argsstring>
        <name>qdb_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a null-terminated string describing the API version. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A static, null-terminated string describing the API version. The buffer is API managed and should not be freed or written to by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga9be759a55d51e1d1407150985ff1397e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> const char *</type>
        <definition>QDB_API_LINKAGE const char* qdb_build</definition>
        <argsstring>(void)</argsstring>
        <name>qdb_build</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a null-terminated string describing the exact API build. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A static, null-terminated string describing the exact API build. The buffer is API managed and should not be freed or written to by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_open</definition>
        <argsstring>(qdb_handle_t *handle, qdb_protocol_t proto)</argsstring>
        <name>qdb_open</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__client_1gabbff9df8f8af25c6bdf97cabd157910b" kindref="member">qdb_protocol_t</ref></type>
          <declname>proto</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref>. No connection will be established. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref> that will be ready to connect to a cluster.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>The protocol to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab10eb8485f7e3088c91800b0dd254b71" kindref="member">qdb_connect</ref>, <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>, <ref refid="group__client_1gabbff9df8f8af25c6bdf97cabd157910b" kindref="member">qdb_protocol_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_handle_t qdb_open_tcp</definition>
        <argsstring>(void)</argsstring>
        <name>qdb_open_tcp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a TCP/IP qdb_handle_t. No connection will be established. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An initialized qdb_handle_t, ready to connect, in case of success, NULL in case of failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab10eb8485f7e3088c91800b0dd254b71" kindref="member">qdb_connect</ref>, <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab10eb8485f7e3088c91800b0dd254b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_connect</definition>
        <argsstring>(qdb_handle_t handle, const char *uri)</argsstring>
        <name>qdb_connect</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Binds the client instance to a quasardb cluster and connect to at least one node within. </para>        </briefdescription>
        <detaileddescription>
<para>Quasardb URI are in the form <computeroutput>qdb://&lt;address&gt;:&lt;port&gt;</computeroutput> where <computeroutput>&lt;address&gt;</computeroutput> is either an IPv4 or IPv6 (surrounded with square brackets), or a domain name. It is recommended to specify multiple addresses should the designated node be unavailable.</para><para>URI examples:<itemizedlist>
<listitem><para><computeroutput>qdb://myserver.org:2836</computeroutput> - Connects to myserver.org on the port 2836</para></listitem><listitem><para><computeroutput>qdb://127.0.0.1:2836</computeroutput> - Connects to the local IPv4 loopback on the port 2836</para></listitem><listitem><para><computeroutput>qdb://myserver1.org:2836,myserver2.org:2836</computeroutput> - Connects to myserver1.org or myserver2.org on the port 2836</para></listitem><listitem><para><computeroutput>qdb://[::1]:2836</computeroutput> - Connects to the local IPv6 loopback on the port 2836</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the URI of the quasardb cluster to connect to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref>, <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref> </para></simplesect>
<simplesect kind="attention"><para>Make sure all the addresses in the URI belong to the same cluster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gadbacfb13356c82e1cf54896ed4d8fb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_close</definition>
        <argsstring>(qdb_handle_t handle)</argsstring>
        <name>qdb_close</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes the handle previously opened with <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This results in terminating all connections and releasing all internal buffers, including buffers which may have been allocated as or a result of batch operations or get operations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="attention"><para>API-allocated buffers may be released by this call. For example, the buffer allocated by <ref refid="group__blob_1ga79619e400997cf67c7f213fbcccd88c4" kindref="member">qdb_blob_get</ref> may be released by this call. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gac730e57a2af51766f07acf092bdd6e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_copy_alloc_buffer</definition>
        <argsstring>(qdb_handle_t handle, const void *source_buffer, qdb_size_t source_buffer_size, const void **dest_buffer)</argsstring>
        <name>qdb_copy_alloc_buffer</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>source_buffer</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>source_buffer_size</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>dest_buffer</declname>
        </param>
        <briefdescription>
<para>Creates a clone of a buffer using API&apos;s high-performance memory allocator. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated buffer has to be released later with <ref refid="group__client_1ga31b15fb83e60b9cb16504618616f29f3" kindref="member">qdb_release</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer to clone</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer to clone</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dest_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a a pointer of an API-allocated buffer whose content will be a copy of the source buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga31b15fb83e60b9cb16504618616f29f3" kindref="member">qdb_release</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga31b15fb83e60b9cb16504618616f29f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> void</type>
        <definition>QDB_API_LINKAGE void qdb_release</definition>
        <argsstring>(qdb_handle_t handle, const void *buffer)</argsstring>
        <name>qdb_release</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Releases an API-allocated buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Failure to properly call this function may result in excessive memory usage. Most operations that return a content (e.g. batch operations, <ref refid="group__blob_1ga79619e400997cf67c7f213fbcccd88c4" kindref="member">qdb_blob_get</ref>, <ref refid="group__blob_1gad2ac5b09a51722c08bda77eaff228e9d" kindref="member">qdb_blob_get_and_update</ref>, <ref refid="group__blob_1gac15e696f07b3099e8390fdf7acb3352f" kindref="member">qdb_blob_compare_and_swap</ref>...) will allocate a buffer for the content and will not release the allocated buffer until you either call this function or close the handle.</para><para>The function will be able to release any kind of buffer allocated by a quasardb API call, whether it&apos;s a single buffer, an array or an array of buffers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an API-allocated buffer to release. The behavior for non API buffers is undefined. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae2e11082ceb8cb647680482b9056a2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_remove</definition>
        <argsstring>(qdb_handle_t handle, const char *alias)</argsstring>
        <name>qdb_remove</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Removes an entry from the cluster, regardless of its type. </para>        </briefdescription>
        <detaileddescription>
<para>This call will remove the entry, whether it is a blob, integer, deque, stream or hset. It will properly untag the entry. If the entry spawns on multiple entries or nodes (deques, hsets and streams) all blocks will be properly removed.</para><para>The call is ACID, regardless of the type of the entry and a transaction will be created if need be.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gad9d32d4869c9950803f7cde8893de1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_expires_at</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_time_t expiry_time)</argsstring>
        <name>qdb_expires_at</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>Sets the absolute expiration time of an entry, if the type supports expiration. </para>        </briefdescription>
        <detaileddescription>
<para>Blobs and integers can have an expiration time and will be automatically removed by the cluster when they expire.</para><para>The absolute expiration time is the Unix epoch, that is, the number of milliseconds since 1 January 1970, 00:00:00 UTC. To use a relative expiration time (that is expiration relative to the time of the call), use <ref refid="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" kindref="member">qdb_expires_from_now</ref>.</para><para>To remove the expiration time of an entry, specify the value <ref refid="group__client_1gad64f32e3ffa0f7c4ebe486c178dd297d" kindref="member">qdb_never_expires</ref> as <computeroutput>expiry_time</computeroutput> parameter.</para><para>Values in the past are refused, but the cluster will have a certain tolerance to account for clock skews.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The new, absolute UTC expiration time.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="attention"><para>It is an error to specify an expiration in the past, although the cluster has a certain tolerance to account for clock synchronization </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" kindref="member">qdb_expires_from_now</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_expires_from_now</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_time_t expiry_delta)</argsstring>
        <name>qdb_expires_from_now</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_delta</declname>
        </param>
        <briefdescription>
<para>Sets the expiration time of an entry, relative to the current time of the client, if the type supports expiration. </para>        </briefdescription>
        <detaileddescription>
<para>Blobs and integers can have an expiration time and will automatically be removed by the cluster when they expire.</para><para>The expiration is relative to the current time of the machine.</para><para>To remove the expiration time of an entry or to use an absolute expiration time use <ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds, relative to the current time, after which the entry should expire.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga596f19e470bf460cd552db37530961e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_expiry_time</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_time_t *expiry_time)</argsstring>
        <name>qdb_get_expiry_time</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> *</type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>Retrieves the absolute expiration time of the given entry. </para>        </briefdescription>
        <detaileddescription>
<para>The returned expiration time is the Unix epoch, UTC.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an expiry time which will be set to the expiration of the entry if the call is successful.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" kindref="member">qdb_expires_from_now</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gae2647bb54f4ba01dbad2fd09255d875d" kindref="member">qdb_get_metadata</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga00e927042f6f031e2b07bc8b2ea579f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_location</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_remote_node_t *location)</argsstring>
        <name>qdb_get_location</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="structqdb__remote__node__t" kindref="compound">qdb_remote_node_t</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Returns the primary node of an entry. </para>        </briefdescription>
        <detaileddescription>
<para>The exact location of an entry should be assumed random and users should not bother about its location as the API will transparently locate the best node for the requested operation.</para><para>This function is intended for higher level APIs that need to optimize transfers and potentially push computation close to the data.</para><para>This function allocates memory for the null terminated address string call qdb_release on the location structure to release memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">location</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structqdb__remote__node__t" kindref="compound">qdb_remote_node_t</ref> structure that will receive the address of the primary node of the entry if successful.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga31b15fb83e60b9cb16504618616f29f3" kindref="member">qdb_release</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga6446b0628a8ee9639e1fa0da3c6c8527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_type</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_entry_type_t *entry_type)</argsstring>
        <name>qdb_get_type</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1gaaa6272f78edda811822bfce05a07f944" kindref="member">qdb_entry_type_t</ref> *</type>
          <declname>entry_type</declname>
        </param>
        <briefdescription>
<para>Gets the type of an entry, if it exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">entry_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="group__client_1gaaa6272f78edda811822bfce05a07f944" kindref="member">qdb_entry_type_t</ref> that will receive the type of the entry if successful.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gae2647bb54f4ba01dbad2fd09255d875d" kindref="member">qdb_get_metadata</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae2647bb54f4ba01dbad2fd09255d875d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_metadata</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_entry_metadata_t *entry_metadata)</argsstring>
        <name>qdb_get_metadata</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="structqdb__entry__metadata__t" kindref="compound">qdb_entry_metadata_t</ref> *</type>
          <declname>entry_metadata</declname>
        </param>
        <briefdescription>
<para>Gets the meta-information about an entry, if it exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">entry_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structqdb__entry__metadata__t" kindref="compound">qdb_entry_metadata_t</ref> that will receive the metadata of the entry if successful.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga13f319e5668ebfe2e915a41a1a860013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_purge_all</definition>
        <argsstring>(qdb_handle_t handle, int timeout_ms)</argsstring>
        <name>qdb_purge_all</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Removes irremediably all data from all the nodes of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>This function is useful when quasardb is used as a cache and is not the golden source.</para><para>This call is not atomic: if the command cannot be dispatched on the whole cluster, it will be dispatched on as many nodes as possible and the function will return with a <ref refid="group__error_1gga365e768c3ca0f6387d8798eb98c40443aad6d0d2fb89cdc604785b0d0b422b082" kindref="member">qdb_e_ok</ref> code.</para><para>By default cluster does not allow this operation and the function returns a <ref refid="group__error_1gga365e768c3ca0f6387d8798eb98c40443a5e3f7ff277511984a70139328714d839" kindref="member">qdb_e_operation_disabled</ref> error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout value, in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="attention"><para>Use this function at your own risk. This function causes irremediable data loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga731f547a21f4578d65e4b64515f6b264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_trim_all</definition>
        <argsstring>(qdb_handle_t handle, int timeout_ms)</argsstring>
        <name>qdb_trim_all</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Trims all data on all the nodes of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>quasardb uses Multi-Version Concurrency Control (MVCC) as a foundation of its transaction engine. It will automatically clean up old versions as entries are accessed.</para><para>This call is not atomic: if the command cannot be dispatched on the whole cluster, it will be dispatched on as many nodes as possible and the function will return with a <ref refid="group__error_1gga365e768c3ca0f6387d8798eb98c40443aad6d0d2fb89cdc604785b0d0b422b082" kindref="member">qdb_e_ok</ref> code.</para><para>Entries that are not accessed may not be cleaned up, resulting in increasing disk usage.</para><para>This function will request each nodes to trim all entries, release unused memory and compact files on disk. Because this operation is I/O and CPU intensive, it is not recommended to run it when the cluster is heavily used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout value, in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="attention"><para>This function impacts the performance of the cluster. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae171ad6b88f7108682caefc280fe9e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_purge_cache</definition>
        <argsstring>(qdb_handle_t handle, int timeout_ms)</argsstring>
        <name>qdb_purge_cache</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Removes all cached data from all the nodes of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>This function is disabled on a transient cluster. Prefer purge_all in this case.</para><para>This call is not atomic: if the command cannot be dispatched on the whole cluster, it will be dispatched on as many nodes as possible and the function will return with a <ref refid="group__error_1gga365e768c3ca0f6387d8798eb98c40443aad6d0d2fb89cdc604785b0d0b422b082" kindref="member">qdb_e_ok</ref> code.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout value, in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga2cb8462f6902667420894701d588dea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_wait_for_stabilization</definition>
        <argsstring>(qdb_handle_t handle, int timeout_ms)</argsstring>
        <name>qdb_wait_for_stabilization</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Wait for all nodes of the cluster to be stabilized. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout value, in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga8aaf6c6f60163c385d79a2043a9ed199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> const char *</type>
        <definition>QDB_API_LINKAGE const char* qdb_error</definition>
        <argsstring>(qdb_error_t error)</argsstring>
        <name>qdb_error</name>
        <param>
          <type><ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Translates an error code into an English error message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code outputted by another function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A static, null-terminated string describing the error. The buffer is API managed and should not be freed or written to by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/error.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga5381c438bbdf8f637e9257793679344a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_tag_iterator_copy</definition>
        <argsstring>(const qdb_const_tag_iterator_t *original, qdb_const_tag_iterator_t *copy)</argsstring>
        <name>qdb_tag_iterator_copy</name>
        <param>
          <type>const <ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>original</declname>
        </param>
        <param>
          <type><ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Clones a previously initialized tag iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Copies the state of the original iterator to a new iterator. Both iterators can be independently operated afterwards. The cloned iterator will have to be closed with <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>original</parametername>
</parameternamelist>
<parameterdescription>
<para>The original iterator to copy, source.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">copy</parametername>
</parameternamelist>
<parameterdescription>
<para>An uninitialized iterator to be set, destination.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" kindref="member">qdb_tag_iterator_begin</ref>, <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="392" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__client_1gad64f32e3ffa0f7c4ebe486c178dd297d" prot="public" static="no">
        <name>qdb_never_expires</name>
        <initializer>((<ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref>)0u)</initializer>
        <briefdescription>
<para>An arbitrary time value representing the &quot;no expiration&quot; time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="113" column="9" bodyfile="qdb/client.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__client_1gacec73da0a3d7364196f4e6682f5fd522" prot="public" static="no">
        <name>qdb_preserve_expiration</name>
        <initializer>((<ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref>)0xFFFFFFFFFFFFFFFFull)</initializer>
        <briefdescription>
<para>An arbitrary time value representing the &quot;preserve existing
expiration&quot; time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/client.h" line="119" column="9" bodyfile="qdb/client.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
