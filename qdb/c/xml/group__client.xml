<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__client" kind="group">
    <compoundname>client</compoundname>
    <title>General client functions</title>
    <innerclass refid="structqdb__const__iterator__t" prot="public">qdb_const_iterator_t</innerclass>
    <innerclass refid="structqdb__remote__node__t" prot="public">qdb_remote_node_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__client_1ga8aaf6c6f60163c385d79a2043a9ed199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> const char *</type>
        <definition>QDB_API_LINKAGE const char* qdb_error</definition>
        <argsstring>(qdb_error_t error)</argsstring>
        <name>qdb_error</name>
        <param>
          <type><ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Translates an error code into an English error message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>The qdb_error_t code outputted by another function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A static, null terminated string describing the error. The buffer is API managed and should not be freed or written to by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab0ffd6b2788132113bf3152d2d8bb329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> const char *</type>
        <definition>QDB_API_LINKAGE const char* qdb_version</definition>
        <argsstring>(void)</argsstring>
        <name>qdb_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a null terminated string describing the API version. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A static, null terminated string describing the API version. The buffer is API managed and should not be freed or written to by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga9be759a55d51e1d1407150985ff1397e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> const char *</type>
        <definition>QDB_API_LINKAGE const char* qdb_build</definition>
        <argsstring>(void)</argsstring>
        <name>qdb_build</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a null terminated string describing the exact API build. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A static, null terminated string describing the exact API build. The buffer is API managed and should not be freed or written to by the caller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_open</definition>
        <argsstring>(qdb_handle_t *handle, qdb_protocol_t proto)</argsstring>
        <name>qdb_open</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__client_1gabbff9df8f8af25c6bdf97cabd157910b" kindref="member">qdb_protocol_t</ref></type>
          <declname>proto</declname>
        </param>
        <briefdescription>
<para>Creates a qdb_handle_t. No connection will be established. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a qdb_handle_t that will be ready to connect to a cluster. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>The protocol to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab10eb8485f7e3088c91800b0dd254b71" kindref="member">qdb_connect</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gabbff9df8f8af25c6bdf97cabd157910b" kindref="member">qdb_protocol_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_handle_t qdb_open_tcp</definition>
        <argsstring>(void)</argsstring>
        <name>qdb_open_tcp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a TCP/IP qdb_handle_t. No connection will be established. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An initialized qdb_handle_t, ready to connect, in case of success, NULL in case of failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab10eb8485f7e3088c91800b0dd254b71" kindref="member">qdb_connect</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae3e829dc03d7c340a29205577aedaa69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_option_set_timeout</definition>
        <argsstring>(qdb_handle_t handle, int timeout_ms)</argsstring>
        <name>qdb_option_set_timeout</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Sets the timeout of all network operations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The qdb_handle_t that was initialized with qdb_open or qdb_open_tcp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout of network operation, in milliseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="remark"><para>The lower the timeout, the higher the risk of having timeout errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga4bd0df71f3846e92ac1d3ff0e2eb8a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_option_add_log_callback</definition>
        <argsstring>(qdb_log_callback cb, qdb_log_callback_id *callback_id)</argsstring>
        <name>qdb_option_add_log_callback</name>
        <param>
          <type><ref refid="group__client_1ga27259bcef89d32c184a9e03fc0f157ce" kindref="member">qdb_log_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga6a72d356408c58332b03af73a52c84d6" kindref="member">qdb_log_callback_id</ref> *</type>
          <declname>callback_id</declname>
        </param>
        <briefdescription>
<para>Adds a callback that will receive internal API log messages. This can be used to incorporate internal API statuses in your log. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback of type qdb_log_callback. The callback will be called every time the API logs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback_id</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an unique callback identifier that can be used to remove the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga27259bcef89d32c184a9e03fc0f157ce" kindref="member">qdb_log_callback</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga662ae988771904ba26c9ab8d07cc5884" kindref="member">qdb_option_remove_log_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga662ae988771904ba26c9ab8d07cc5884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_option_remove_log_callback</definition>
        <argsstring>(qdb_log_callback_id callback_id)</argsstring>
        <name>qdb_option_remove_log_callback</name>
        <param>
          <type><ref refid="group__client_1ga6a72d356408c58332b03af73a52c84d6" kindref="member">qdb_log_callback_id</ref></type>
          <declname>callback_id</declname>
        </param>
        <briefdescription>
<para>Removes a previously added log callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier set by qdb_option_add_log_callback that will determine which callback to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga27259bcef89d32c184a9e03fc0f157ce" kindref="member">qdb_log_callback</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga4bd0df71f3846e92ac1d3ff0e2eb8a87" kindref="member">qdb_option_add_log_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gaec243774077e7b323dd5b57c99d00e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_option_set_compression</definition>
        <argsstring>(qdb_handle_t handle, qdb_compression_t comp_level)</argsstring>
        <name>qdb_option_set_compression</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga3b4ea526bf0468ff144305f011eb1793" kindref="member">qdb_compression_t</ref></type>
          <declname>comp_level</declname>
        </param>
        <briefdescription>
<para>Set the compression level for all future messages emitted by the specified handle. Regardless of this parameter, the API will be able to read whatever compression the server uses. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle on which to set the compression level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The compression level to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga3b4ea526bf0468ff144305f011eb1793" kindref="member">qdb_compression_t</ref> </para></simplesect>
<simplesect kind="remark"><para>For better performance, consider disabling compression if your data is already compressed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab10eb8485f7e3088c91800b0dd254b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_connect</definition>
        <argsstring>(qdb_handle_t handle, const char *uri)</argsstring>
        <name>qdb_connect</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Binds the client instance to a quasardb cluster and connect to at least one node within. </para>        </briefdescription>
        <detaileddescription>
<para>Quasardb URI are in the form qdb://[address]:[port] where address is either an IPv4 or IPv6 or a domain name. It is recommended to specify multiple addresses should the designated node be unavailable.</para><para>URI Examples:<itemizedlist>
<listitem><para>qdb://myserver.org:2836 - Connects to myserver.org on the port 2836</para></listitem><listitem><para>qdb://127.0.0.1:2836 - Connects to the local IPv4 loopback on the port 2836</para></listitem><listitem><para>qdb://myserver1.org:2836,myserver2.org:2836 - Connects to myserver1.org or myserver2.org on the port 2836</para></listitem><listitem><para>qdb://::1:2836 - Connects to the local IPv6 loopback on the port 2836</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the URI of the quasardb cluster to connect to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref> </para></simplesect>
<simplesect kind="attention"><para>Make sure all the addresses in the URI belong to the same cluster </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gadbacfb13356c82e1cf54896ed4d8fb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_close</definition>
        <argsstring>(qdb_handle_t handle)</argsstring>
        <name>qdb_close</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes the handle previously opened with qdb_open or qdb_open_tcp. </para>        </briefdescription>
        <detaileddescription>
<para>This results in terminating all connections and releasing all internal buffers, including buffers which may have been allocated as or a result of batch operations or get operations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="attention"><para>API-allocated buffers may be released by this call. For example, the buffer allocated by qdb_blob_get may be released by this call. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gac730e57a2af51766f07acf092bdd6e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_copy_alloc_buffer</definition>
        <argsstring>(qdb_handle_t handle, const void *source_buffer, qdb_size_t source_buffer_size, const void **dest_buffer)</argsstring>
        <name>qdb_copy_alloc_buffer</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>source_buffer</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>source_buffer_size</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>dest_buffer</declname>
        </param>
        <briefdescription>
<para>Creates a clone of a buffer using API&apos;s high-performance memory allocator. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated buffer has to be released later with qdb_free_buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by qdb_open or qdb_open_tcp. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer to clone </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer to clone </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a a pointer of an API-allocated buffer whose content will be a copy of the source buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> void</type>
        <definition>QDB_API_LINKAGE void qdb_free_buffer</definition>
        <argsstring>(qdb_handle_t handle, const void *buffer)</argsstring>
        <name>qdb_free_buffer</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Releases an API allocated buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Failure to properly call this function may result in excessive memory usage. Most operations that return a content (e.g. batch operations, <ref refid="group__blob_1ga79619e400997cf67c7f213fbcccd88c4" kindref="member">qdb_blob_get</ref>, <ref refid="group__blob_1gad2ac5b09a51722c08bda77eaff228e9d" kindref="member">qdb_blob_get_and_update</ref>, <ref refid="group__blob_1gac15e696f07b3099e8390fdf7acb3352f" kindref="member">qdb_blob_compare_and_swap</ref>...) will allocate a buffer for the content and will not release the allocated buffer until you either call this function or close the handle.</para><para>For API functions that returns a collection of results, use <ref refid="group__client_1ga17d5c82ec27ff68c94870a69b603dc6f" kindref="member">qdb_free_results</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an API allocated buffer to release. The behavior for non API buffers is undefined. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga17d5c82ec27ff68c94870a69b603dc6f" kindref="member">qdb_free_results</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga17d5c82ec27ff68c94870a69b603dc6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> void</type>
        <definition>QDB_API_LINKAGE void qdb_free_results</definition>
        <argsstring>(qdb_handle_t handle, const char **results, qdb_size_t results_count)</argsstring>
        <name>qdb_free_results</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>results</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>results_count</declname>
        </param>
        <briefdescription>
<para>Results a collection of API allocated results. </para>        </briefdescription>
        <detaileddescription>
<para>Functions that returns a list of results expect the API-allocated buffers to be released with qdb_free_results.</para><para>Example of such functions:<itemizedlist>
<listitem><para><ref refid="group__prefix_1ga2e0288558e495e43435b38e0a637ddf8" kindref="member">qdb_prefix_get</ref></para></listitem><listitem><para><ref refid="group__tag_1ga574db1ed3adf7164e01266433fba1ba1" kindref="member">qdb_get_tagged</ref></para></listitem><listitem><para><ref refid="group__tag_1ga0cf641ba3a42e9478e25bffb0d17b360" kindref="member">qdb_get_tags</ref></para></listitem></itemizedlist>
</para><para>For API functions that return a single content, use qdb_free_buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of results returned by a quasardb API call. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of results returned by the quasardb API call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae2e11082ceb8cb647680482b9056a2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_remove</definition>
        <argsstring>(qdb_handle_t handle, const char *alias)</argsstring>
        <name>qdb_remove</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Removes an entry from the cluster, regardless of its type. </para>        </briefdescription>
        <detaileddescription>
<para>This call will remove the entry, whether it is a blob, integer, deque, stream or hset. It will properly untag the entry. If the entry spawns on multiple entries or nodes (deques, hsets and streams) all blocks will be properly removed.</para><para>The call is ACID, regardless of the type of the entry and a transaction will be created if need be.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gad9d32d4869c9950803f7cde8893de1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_expires_at</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_time_t expiry_time)</argsstring>
        <name>qdb_expires_at</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>Sets the absolute expiration time of an entry, if the type supports expiration. </para>        </briefdescription>
        <detaileddescription>
<para>Blobs and integers can have an expiration time and will automatically be removed by the cluster when they expire.</para><para>The absolute expiration time is the Unix epoch, that is, the number of seconds since January 1st 1970 00h00 (UTC). To use a relative expiration time (that is expiration relative to the time of the call), use <ref refid="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" kindref="member">qdb_expires_from_now</ref>.</para><para>To remove the expiration time of an entry, use the specify value qdb_never_expires.</para><para>Values in the past are refused, but the cluster will have a certain tolerance to account for clock skews.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The new, absolute UTC expiration time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="attention"><para>It is an error to specify an expiration in the time, although the cluster has a certain tolerance </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" kindref="member">qdb_expires_from_now</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_expires_from_now</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_time_t expiry_delta)</argsstring>
        <name>qdb_expires_from_now</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_delta</declname>
        </param>
        <briefdescription>
<para>Sets the expiration time of an entry, relative to the current time of the client, if the type supports expiration. </para>        </briefdescription>
        <detaileddescription>
<para>Blobs and integers can have an expiration time and will automatically be removed by the cluster when they expire.</para><para>The expiration is relative to the current time of the machine.</para><para>To remove the expiration time of an entry or to use an absolute expiration time use <ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of seconds, relative to the current time, after which the entry should expire. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga596f19e470bf460cd552db37530961e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_expiry_time</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_time_t *expiry_time)</argsstring>
        <name>qdb_get_expiry_time</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> *</type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>Retrieves the absolute expiration time of the given entry. </para>        </briefdescription>
        <detaileddescription>
<para>The returned expiration time is the Unix epoch, UTC.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an expiry time which will be set to the expiration of the entry if the call is successful. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gae3cd85f8720077bf2345e8c294f8b4b2" kindref="member">qdb_expires_from_now</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga00e927042f6f031e2b07bc8b2ea579f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_location</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_remote_node_t *location)</argsstring>
        <name>qdb_get_location</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="structqdb__remote__node__t" kindref="compound">qdb_remote_node_t</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Returns the primary node of an entry. </para>        </briefdescription>
        <detaileddescription>
<para>The exact location of an entry should be assumed random and users should not bother about its location as the API will transparently locate the best node for the requested operation.</para><para>This function is intended for higher level APIs that need to optimize transfers and potentially push computation close to the data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="structqdb__remote__node__t" kindref="compound">qdb_remote_node_t</ref> structure that will receive the address of the primary node of the entry if successful </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga6446b0628a8ee9639e1fa0da3c6c8527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_type</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, qdb_entry_type_t *entry_type)</argsstring>
        <name>qdb_get_type</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type><ref refid="group__client_1gaaa6272f78edda811822bfce05a07f944" kindref="member">qdb_entry_type_t</ref> *</type>
          <declname>entry_type</declname>
        </param>
        <briefdescription>
<para>Gets the type of an entry, if it exists. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="group__client_1gaaa6272f78edda811822bfce05a07f944" kindref="member">qdb_entry_type_t</ref> that will receive the type of the entry if successful. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga9852d2db0f72a49e5eec798cf2c11acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_purge_all</definition>
        <argsstring>(qdb_handle_t handle)</argsstring>
        <name>qdb_purge_all</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes irremediably all data from all the nodes of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>This function is useful when quasardb is used as a cache and is not the golden source.</para><para>This call is not atomic: if the command cannot be dispatched on the whole cluster, it will be dispatched on as many nodes as possible and the function will return with a qdb_e_ok code.</para><para>By default cluster do not allow this operation and the function will return a qdb_e_operation_disabled error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="attention"><para>Use this function at your own risk. This function causes irremediable data loss. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga9b43c77ce9986e8ab424219336674da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_trim_all</definition>
        <argsstring>(qdb_handle_t handle)</argsstring>
        <name>qdb_trim_all</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Trims all data on all the nodes of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>quasardb uses Multi-Version Concurrency Control (MVCC) as a foundation of its transaction engine. It will automatically clean up old versions as entries are acceded.</para><para>This call is not atomic: if the command cannot be dispatched on the whole cluster, it will be dispatched on as many nodes as possible and the function will return with a qdb_e_ok code.</para><para>Entries that are not acceded may not be cleaned up, resulting in increasing disk usage.</para><para>This function will request each nodes to trim all entries, release unused memory and compact files on disk. Because this operation is I/O and CPU intensive, it is not recommended to run it when the cluster is heavily used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="attention"><para>This function impacts the performance of the cluster. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga9e206a7e7c1423fea3164104c27c11c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_node_status</definition>
        <argsstring>(qdb_handle_t handle, const char *uri, const char **content, qdb_size_t *content_length)</argsstring>
        <name>qdb_node_status</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
<para>Returns the status of a node. </para>        </briefdescription>
        <detaileddescription>
<para>The API will request the node for its status and allocate a buffer of the appropriate size, which will later have to be releases with <ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref>.</para><para>The status is JSON object and contains current information of the node state, as described in the documentation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the URI of node for which the status is requested </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer of an API-allocated buffer holding the node status. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer representing the size of the API-allocated buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga5276d38715650cb3102ce3f1f22a4945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_node_config</definition>
        <argsstring>(qdb_handle_t handle, const char *uri, const char **content, qdb_size_t *content_length)</argsstring>
        <name>qdb_node_config</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
<para>Returns the configuration of a node. </para>        </briefdescription>
        <detaileddescription>
<para>The API will request the node for its configuration and allocate a buffer of the appropriate size, which will later have to be releases with <ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref>.</para><para>The configuration is JSON object, as described in the documentation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the URI of the node for which the configuration is requested </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer of an API-allocated buffer holding the node configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer representing the size of the API-allocated buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="713" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga0f18055deb3c22c89e6391595b85a4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_node_topology</definition>
        <argsstring>(qdb_handle_t handle, const char *uri, const char **content, qdb_size_t *content_length)</argsstring>
        <name>qdb_node_topology</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
<para>Returns the topology of a node. </para>        </briefdescription>
        <detaileddescription>
<para>The API will request the node for its topology and allocate a buffer of the appropriate size, which will later have to be releases with <ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref>.</para><para>The topology is JSON object containing the node address, and the addresses of its successor and predecessor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the URI of node for which the topology is requested </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer of an API-allocated buffer holding the node topology. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer representing the size of the API-allocated buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab7c73a18d1c3efff80b73a542d192d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_node_stop</definition>
        <argsstring>(qdb_handle_t handle, const char *uri, const char *reason)</argsstring>
        <name>qdb_node_stop</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Requests the node to gracefully stop. </para>        </briefdescription>
        <detaileddescription>
<para>Use this function to remotely stop a node, the supplied reason will be displayed in the logs of the remote node.</para><para>By default cluster do not allow this operation and the function will return a qdb_e_operation_disabled error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the URI of node to be stopped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string of the reason for the stop </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_iterator_begin</definition>
        <argsstring>(qdb_handle_t handle, qdb_const_iterator_t *iterator)</argsstring>
        <name>qdb_iterator_begin</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Creates an iterator that points to the &quot;first&quot; entry of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>This function enables you to iterate on all the entries of a cluster. Keep in mind that there is no guarantee regarding the order of entries.</para><para>The iteration occurs at a fixed point in time, operations occurring after the iterator has been created will not be visible.</para><para>Call <ref refid="group__client_1ga33c4a95b80034c417b92a5fb4afb70d8" kindref="member">qdb_iterator_next</ref> to go to the next available entry, if any.</para><para>When iteration completes the function will return qdb_e_alias_not_found and the user must call <ref refid="group__client_1ga61e0ede851d11ec7fa4dce54bf26434f" kindref="member">qdb_iterator_close</ref> to release client allocated resources for the iteration.</para><para>Iteration does not allocate any resource on the server.</para><para>Whole cluster iteration is intended for some very specific use case. It is greatly advised to use tags to work on subgroup of entries.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an uninitialized iterator structure that will be set to the first entry if successful </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga33c4a95b80034c417b92a5fb4afb70d8" kindref="member">qdb_iterator_next</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab7a14f035da4003117b815466c226715" kindref="member">qdb_iterator_previous</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga61e0ede851d11ec7fa4dce54bf26434f" kindref="member">qdb_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga20f363c2e7bdaa7ffaedc835dd08b34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_iterator_rbegin</definition>
        <argsstring>(qdb_handle_t handle, qdb_const_iterator_t *iterator)</argsstring>
        <name>qdb_iterator_rbegin</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Creates an iterator that points to the &quot;last&quot; entry of the cluster. </para>        </briefdescription>
        <detaileddescription>
<para>This function enables you to iterate on all the entries of a cluster. Keep in mind that there is no guarantee regarding the order of entries.</para><para>This works exactly like <ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref>, excepts it starts at the &quot;end&quot; of the cluster.</para><para>Call <ref refid="group__client_1gab7a14f035da4003117b815466c226715" kindref="member">qdb_iterator_previous</ref> to go to the previous available entry, if any.</para><para>See <ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref> for more information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an uninitialized iterator structure that will be set to the last entry if successful </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga33c4a95b80034c417b92a5fb4afb70d8" kindref="member">qdb_iterator_next</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gab7a14f035da4003117b815466c226715" kindref="member">qdb_iterator_previous</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga61e0ede851d11ec7fa4dce54bf26434f" kindref="member">qdb_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga33c4a95b80034c417b92a5fb4afb70d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_iterator_next</definition>
        <argsstring>(qdb_const_iterator_t *iterator)</argsstring>
        <name>qdb_iterator_next</name>
        <param>
          <type><ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Advances an iterator to the next entry, if any. </para>        </briefdescription>
        <detaileddescription>
<para>Updates the iterator to point to the next available entry in the cluster. Although each entry is returned only once, the order in which entries are returned is undefined.If there is no following entry or it is otherwise unavailable, the function will return qdb_e_alias_not_found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a previously initialized iterator.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gab7a14f035da4003117b815466c226715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_iterator_previous</definition>
        <argsstring>(qdb_const_iterator_t *iterator)</argsstring>
        <name>qdb_iterator_previous</name>
        <param>
          <type><ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Advances an iterator to the previous entry, if any. </para>        </briefdescription>
        <detaileddescription>
<para>Updates the iterator to point to the previous available entry in the cluster. Although each entry is returned only once, the order in which entries are returned is undefined. If there is no previous entry or it is otherwise unavailable, the function will return qdb_e_alias_not_found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a previously initialized iterator.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="852" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga61e0ede851d11ec7fa4dce54bf26434f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_iterator_close</definition>
        <argsstring>(qdb_const_iterator_t *iterator)</argsstring>
        <name>qdb_iterator_close</name>
        <param>
          <type><ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Closes a previously initialized iterator and releases all associated resources. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a previously initialized iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__client_1ga20f363c2e7bdaa7ffaedc835dd08b34f" kindref="member">qdb_iterator_rbegin</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="860" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1gac0ad474e9a8360e23c049266f2b6b402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_iterator_copy</definition>
        <argsstring>(const qdb_const_iterator_t *original, qdb_const_iterator_t *copy)</argsstring>
        <name>qdb_iterator_copy</name>
        <param>
          <type>const <ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>original</declname>
        </param>
        <param>
          <type><ref refid="structqdb__const__iterator__t" kindref="compound">qdb_const_iterator_t</ref> *</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Clones a previously initialized iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Copies the state of the original iterator to a new iterator. Both iterators can afterward be independently operated. The cloned iterator will have to be closed with <ref refid="group__client_1ga61e0ede851d11ec7fa4dce54bf26434f" kindref="member">qdb_iterator_close</ref>.</para><para><simplesect kind="see"><para><ref refid="group__client_1ga20f363c2e7bdaa7ffaedc835dd08b34f" kindref="member">qdb_iterator_rbegin</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1gace34bf9fc974a2b7ad1525d0ca120920" kindref="member">qdb_iterator_begin</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__client_1ga61e0ede851d11ec7fa4dce54bf26434f" kindref="member">qdb_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__client_1ga5381c438bbdf8f637e9257793679344a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_tag_iterator_copy</definition>
        <argsstring>(const qdb_const_tag_iterator_t *original, qdb_const_tag_iterator_t *copy)</argsstring>
        <name>qdb_tag_iterator_copy</name>
        <param>
          <type>const <ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>original</declname>
        </param>
        <param>
          <type><ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Clones a previously initialized tag iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Copies the state of the original iterator to a new iterator. Both iterators can afterward be independently operated. The cloned iterator will have to be closed with <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref>.</para><para><simplesect kind="see"><para><ref refid="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" kindref="member">qdb_tag_iterator_begin</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/tag.h" line="347" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__client_1ga008cbf050a89152ec67d33e534cd3012" prot="public" static="no">
        <name>QDB_API_LINKAGE</name>
        <briefdescription>
<para>Linking parameters for the API functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="83" column="11" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__client_1gad64f32e3ffa0f7c4ebe486c178dd297d" prot="public" static="no">
        <name>qdb_never_expires</name>
        <initializer>((<ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref>)0u)</initializer>
        <briefdescription>
<para>An arbitrary time value representing the &quot;no expiration&quot; time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="120" column="9" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__client_1gacec73da0a3d7364196f4e6682f5fd522" prot="public" static="no">
        <name>qdb_preserve_expiration</name>
        <initializer>((<ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref>)0xffffffffffffffffull)</initializer>
        <briefdescription>
<para>An arbitrary time value representing the &quot;preserve existing
expiration&quot; time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="126" column="9" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__client_1ga14ba3138099f3c7969f707eb4b16c35b" prot="public" static="no">
        <name>qdb_limits</name>
        <enumvalue id="client_8h_1ga14ba3138099f3c7969f707eb4b16c35bada77b67d62cfd28f8f9131dc039dbf64" prot="public">
          <name>qdb_l_alias_max_length</name>
          <initializer>= 1024</initializer>
          <briefdescription>
<para>The maximum allowed length for aliases. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga14ba3138099f3c7969f707eb4b16c35badf6734fe131fa7d3f5523b8845787d93" prot="public">
          <name>qdb_l_min_prefix_length</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The minimum allowed length for prefix-based search. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration of API limits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="135" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="enum" id="group__client_1ga2c0493e17b424c05b599b54ea641adba" prot="public" static="no">
        <name>qdb_compression</name>
        <enumvalue id="client_8h_1ga2c0493e17b424c05b599b54ea641adbaa4933efb6777664f0e19587b8be37f8d2" prot="public">
          <name>qdb_comp_none</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No compression. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga2c0493e17b424c05b599b54ea641adbaae779c527ad92b6adb5c979f5d0bf0569" prot="public">
          <name>qdb_comp_fast</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum compression speed, potentially minimum compression ratio. This is currently the default. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga2c0493e17b424c05b599b54ea641adbaaa224c10b51af9f8da172e9b2aa6efcb3" prot="public">
          <name>qdb_comp_best</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum compression ratio, potentially minimum compression speed. This is currently not implemented. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration of compression parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gaec243774077e7b323dd5b57c99d00e2d" kindref="member">qdb_option_set_compression</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="151" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="151" bodyend="160"/>
      </memberdef>
      <memberdef kind="enum" id="group__client_1ga222536ecf11bc6ab9468946ba51a446a" prot="public" static="no">
        <name>qdb_protocol</name>
        <enumvalue id="client_8h_1ga222536ecf11bc6ab9468946ba51a446aa2ce2bdabaf83de1269519c5ddec8d71b" prot="public">
          <name>qdb_p_tcp</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Uses TCP/IP to communicate with the cluster. This is currently the only supported network protocol. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration of allowed network protocols. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="171" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="enum" id="group__client_1ga8dc603a7bf83954b01043dcba99354fd" prot="public" static="no">
        <name>qdb_log_level</name>
        <enumvalue id="client_8h_1ga8dc603a7bf83954b01043dcba99354fda2d904e792153b67d549a21feaa3d4c44" prot="public">
          <name>qdb_log_detailed</name>
          <initializer>= 100</initializer>
          <briefdescription>
<para>Log everything. Very verbose. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga8dc603a7bf83954b01043dcba99354fdad1008f1d0dcd305a098b86a27ee39f50" prot="public">
          <name>qdb_log_debug</name>
          <initializer>= 200</initializer>
          <briefdescription>
<para>Log debug level messages and below. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga8dc603a7bf83954b01043dcba99354fda7a09d97eaf9beb3725a7b267f5a5e2fb" prot="public">
          <name>qdb_log_info</name>
          <initializer>= 300</initializer>
          <briefdescription>
<para>Log information level messages and below. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga8dc603a7bf83954b01043dcba99354fda293192e62cca3326d9df8aac91a1e027" prot="public">
          <name>qdb_log_warning</name>
          <initializer>= 400</initializer>
          <briefdescription>
<para>Log warning level messages and below. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga8dc603a7bf83954b01043dcba99354fdaad6c7f5bca14b2e27d8bf909eabc1bd3" prot="public">
          <name>qdb_log_error</name>
          <initializer>= 500</initializer>
          <briefdescription>
<para>Log error level messages and below. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1ga8dc603a7bf83954b01043dcba99354fda2f06b74a0d684535fe526435f3849bf4" prot="public">
          <name>qdb_log_panic</name>
          <initializer>= 600</initializer>
          <briefdescription>
<para>Log panic level messages and below. Very terse. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enumeration of log level. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1ga27259bcef89d32c184a9e03fc0f157ce" kindref="member">qdb_log_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="186" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="186" bodyend="199"/>
      </memberdef>
      <memberdef kind="enum" id="group__client_1gabc708719df4e28cd85c743e1a4582661" prot="public" static="no">
        <name>qdb_entry_type</name>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661a696fbb89655c7dd32c7a7e75b8681bcf" prot="public">
          <name>qdb_entry_uninitialized</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Uninitialized value. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661ace9c26f51f6c16e8ddbc3f28186ab651" prot="public">
          <name>qdb_entry_blob</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>A binary large object (blob) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661a15e8fce791e52b1d141523cd57535f36" prot="public">
          <name>qdb_entry_integer</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>A signed 64-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661a0151c74b116bcf742d486f31e1875688" prot="public">
          <name>qdb_entry_hset</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>A distributed hash set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661a314adddcdc6c99386a4aaa52d2607a1a" prot="public">
          <name>qdb_entry_tag</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>A tag. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661a9d5a0e0781bef6833f2520af9614aef3" prot="public">
          <name>qdb_entry_deque</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>A distributed double-entry queue (deque) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="client_8h_1gabc708719df4e28cd85c743e1a4582661ae5094abbbeb67d245fb26cd935e3eb4a" prot="public">
          <name>qdb_entry_stream</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>A distributed binary stream. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A enumeration representing possible entries type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="279" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="279" bodyend="294"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__client_1ga4745ed10b405291a321ec7150368a4b1" prot="public" static="no">
        <type>time_t</type>
        <definition>qdb_time_t</definition>
        <argsstring></argsstring>
        <name>qdb_time_t</name>
        <briefdescription>
<para>A cross-platform type that represents a time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gad9d32d4869c9950803f7cde8893de1fa" kindref="member">qdb_expires_at</ref> </para></simplesect>
<simplesect kind="remark"><para>qdb_time_t MUST be 64-bit large. The API will probably not link otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="98" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga2b6f368592c49501d41ec2330b964147" prot="public" static="no">
        <type>size_t</type>
        <definition>qdb_size_t</definition>
        <argsstring></argsstring>
        <name>qdb_size_t</name>
        <briefdescription>
<para>An alias for size_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="104" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga17492cb84da5466d0c742f0561df6597" prot="public" static="no">
        <type>int64_t</type>
        <definition>qdb_int_t</definition>
        <argsstring></argsstring>
        <name>qdb_int_t</name>
        <briefdescription>
<para>A cross-platform type that represents a signed 64-bit integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="113" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1gab2ede040a754735a3f751a14acd8cf7f" prot="public" static="no">
        <type>enum <ref refid="group__client_1ga14ba3138099f3c7969f707eb4b16c35b" kindref="member">qdb_limits</ref></type>
        <definition>qdb_limits_t</definition>
        <argsstring></argsstring>
        <name>qdb_limits_t</name>
        <briefdescription>
<para>A type alias for enum qdb_limits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga3b4ea526bf0468ff144305f011eb1793" prot="public" static="no">
        <type>enum <ref refid="group__client_1ga2c0493e17b424c05b599b54ea641adba" kindref="member">qdb_compression</ref></type>
        <definition>qdb_compression_t</definition>
        <argsstring></argsstring>
        <name>qdb_compression_t</name>
        <briefdescription>
<para>A type alias for enum qdb_compression. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gaec243774077e7b323dd5b57c99d00e2d" kindref="member">qdb_option_set_compression</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1gabbff9df8f8af25c6bdf97cabd157910b" prot="public" static="no">
        <type>enum <ref refid="group__client_1ga222536ecf11bc6ab9468946ba51a446a" kindref="member">qdb_protocol</ref></type>
        <definition>qdb_protocol_t</definition>
        <argsstring></argsstring>
        <name>qdb_protocol_t</name>
        <briefdescription>
<para>A type alias for enum qdb_protocol. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1gae0666863f2369cd07dbd9fdf350c8cd6" prot="public" static="no">
        <type>enum <ref refid="group__client_1ga8dc603a7bf83954b01043dcba99354fd" kindref="member">qdb_log_level</ref></type>
        <definition>qdb_log_level_t</definition>
        <argsstring></argsstring>
        <name>qdb_log_level_t</name>
        <briefdescription>
<para>A type alias for enum qdb_log_level. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga720fb72da4197685cc354214e96796c1" prot="public" static="no">
        <type>struct qdb_handle_internal *</type>
        <definition>qdb_handle_t</definition>
        <argsstring></argsstring>
        <name>qdb_handle_t</name>
        <briefdescription>
<para>An opaque handle to internal API-allocated structures needed for maintaining connection to a cluster. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="205" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga6a72d356408c58332b03af73a52c84d6" prot="public" static="no">
        <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
        <definition>qdb_log_callback_id</definition>
        <argsstring></argsstring>
        <name>qdb_log_callback_id</name>
        <briefdescription>
<para>An unique callback identifier returned by qdb_option_add_log_callback. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__client_1ga4bd0df71f3846e92ac1d3ff0e2eb8a87" kindref="member">qdb_option_add_log_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="211" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1ga27259bcef89d32c184a9e03fc0f157ce" prot="public" static="no">
        <type>void(*</type>
        <definition>qdb_log_callback</definition>
        <argsstring>)(qdb_log_level_t, const unsigned long *, unsigned long, unsigned long, const char *, size_t)</argsstring>
        <name>qdb_log_callback</name>
        <briefdescription>
<para>A typedef representing a log callback. </para>        </briefdescription>
        <detaileddescription>
<para>The profile of the functions</para><para><simplesect kind="see"><para><ref refid="group__client_1ga4bd0df71f3846e92ac1d3ff0e2eb8a87" kindref="member">qdb_option_add_log_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="220" column="1" bodyfile="D:/sources/quasardb/qdb/api/include/qdb/client.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__client_1gaaa6272f78edda811822bfce05a07f944" prot="public" static="no">
        <type>enum <ref refid="group__client_1gabc708719df4e28cd85c743e1a4582661" kindref="member">qdb_entry_type</ref></type>
        <definition>qdb_entry_type_t</definition>
        <argsstring></argsstring>
        <name>qdb_entry_type_t</name>
        <briefdescription>
<para>A type alias for enum qdb_entry_type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/client.h" line="294" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
