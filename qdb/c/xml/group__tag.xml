<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__tag" kind="group">
    <compoundname>tag</compoundname>
    <title>Tagging operations</title>
    <innerclass refid="structqdb__const__tag__iterator__t" prot="public">qdb_const_tag_iterator_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__tag_1gac74a313fbc3483163798d0ab4fa36792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_attach_tag</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const char *tag)</argsstring>
        <name>qdb_attach_tag</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Adds a tag to an entry. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The entry must exist.</para><para>The tag may or may not exist.</para><para>Consider using <ref refid="group__tag_1gacb8892cf8e389c053af5664b59f4c9b1" kindref="member">qdb_attach_tags</ref> if you are adding several tags to the same entry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry to which the tag must be added.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the tag to add to the entry</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1gacb8892cf8e389c053af5664b59f4c9b1" kindref="member">qdb_attach_tags</ref>, <ref refid="group__tag_1ga1e472453b30ae0a338011ae501215afe" kindref="member">qdb_has_tag</ref>, <ref refid="group__tag_1gaea6723b4cef45f5c4fdf03db8f5d5ada" kindref="member">qdb_detach_tag</ref>, <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1gacb8892cf8e389c053af5664b59f4c9b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_attach_tags</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const char *const *tags, size_t tag_count)</argsstring>
        <name>qdb_attach_tags</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_count</declname>
        </param>
        <briefdescription>
<para>Adds a collection of tags to a single entry. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The function will ignore existing tags.</para><para>The entry must exist.</para><para>The tag may or may not exist.</para><para>Consider using <ref refid="group__tag_1gac74a313fbc3483163798d0ab4fa36792" kindref="member">qdb_attach_tag</ref> if you are adding a single tag.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry to which the tags must be added.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of null-terminated UTF-8 strings representing the tags to add to the entry</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of tags to add to the entry.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1gac74a313fbc3483163798d0ab4fa36792" kindref="member">qdb_attach_tag</ref>, <ref refid="group__tag_1ga1e472453b30ae0a338011ae501215afe" kindref="member">qdb_has_tag</ref>, <ref refid="group__tag_1ga442402fdad24d996fc96307f12422b1e" kindref="member">qdb_detach_tags</ref>, <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1ga1e472453b30ae0a338011ae501215afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_has_tag</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const char *tag)</argsstring>
        <name>qdb_has_tag</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Tests if an entry has the request tag. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The entry must exist.</para><para>If you need to test several entries and/or several tags, consider using a batch for maximum performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry to which the tag must be tested.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the tag for which presence must be tested</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref>, <ref refid="group__batch_1gab7b2123fa8843971ce325573c224fd7a" kindref="member">qdb_run_batch</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1gaea6723b4cef45f5c4fdf03db8f5d5ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_detach_tag</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const char *tag)</argsstring>
        <name>qdb_detach_tag</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Removes a tag from an entry. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The entry must exist.</para><para>The tag must exist.</para><para>Consider using <ref refid="group__tag_1ga442402fdad24d996fc96307f12422b1e" kindref="member">qdb_detach_tags</ref> if you are removing several tags at once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry to which the tag must be remove.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the tag to remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga442402fdad24d996fc96307f12422b1e" kindref="member">qdb_detach_tags</ref>, <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1ga442402fdad24d996fc96307f12422b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_detach_tags</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const char *const *tags, size_t tag_count)</argsstring>
        <name>qdb_detach_tags</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_count</declname>
        </param>
        <briefdescription>
<para>Removes a collection of tags from a single entry. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The entry must exist.</para><para>The tags must exist.</para><para>Consider using <ref refid="group__tag_1gaea6723b4cef45f5c4fdf03db8f5d5ada" kindref="member">qdb_detach_tag</ref> if you are removing a single tag.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry to which the tags must be removed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of null-terminated UTF-8 strings representing the tags to remove.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of tags to remove to the entry.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1gaea6723b4cef45f5c4fdf03db8f5d5ada" kindref="member">qdb_detach_tag</ref>, <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_tagged</definition>
        <argsstring>(qdb_handle_t handle, const char *tag, const char ***aliases, size_t *alias_count)</argsstring>
        <name>qdb_get_tagged</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char ***</type>
          <declname>aliases</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>alias_count</declname>
        </param>
        <briefdescription>
<para>Retrieves all entries that have the specified tag. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The tag must exist.</para><para>The complexity of this function is constant.</para><para>Consider using <ref refid="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" kindref="member">qdb_tag_iterator_begin</ref> if you expect the number of entries to be very large.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the tag for which to search entries.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">aliases</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of null-terminated UTF-8 string that will list the aliases of the entries having the requested tag.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">alias_count</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer that will receive the number of returned aliases.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref>, <ref refid="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" kindref="member">qdb_tag_iterator_begin</ref>, <ref refid="group__client_1ga31b15fb83e60b9cb16504618616f29f3" kindref="member">qdb_release</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1ga1345b3a0455aed939d07f256d06f598a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_tagged_count</definition>
        <argsstring>(qdb_handle_t handle, const char *tag, qdb_uint_t *count)</argsstring>
        <name>qdb_get_tagged_count</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>qdb_uint_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Computes the approximate count of all entries matching the specified tag, up to the configured max cardinality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the tag for which to search entries.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">count</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer that will receive the count of tags</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" kindref="member">qdb_get_tags</ref>, <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__option_1ga0b5e2310b0da98faa332d11f1100ddd7" kindref="member">qdb_option_set_max_cardinality</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1gacbc51f9ce7952bbe9ae8460cc73e890e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_get_tags</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const char ***tags, size_t *tag_count)</argsstring>
        <name>qdb_get_tags</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const char ***</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>tag_count</declname>
        </param>
        <briefdescription>
<para>Retrieves all the tags of an entry. </para>        </briefdescription>
        <detaileddescription>
<para>Tagging an entry enables you to search for entries based on their tags. Tags scale across nodes.</para><para>The entry must exist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the alias of the entry to which the tag must be added.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tags</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of null-terminated UTF-8 string that will list the tags of the entry</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tag_count</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an integer that will receive the number of returned tags.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__client_1ga31b15fb83e60b9cb16504618616f29f3" kindref="member">qdb_release</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_tag_iterator_begin</definition>
        <argsstring>(qdb_handle_t handle, const char *tag, qdb_const_tag_iterator_t *iterator)</argsstring>
        <name>qdb_tag_iterator_begin</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Creates an iterator that will point to the first entry having the the specified tag. </para>        </briefdescription>
        <detaileddescription>
<para>The order in which iteration occurs is unspecified, but entries matching a tag will never appear twice.</para><para>Only forward iteration is currently supported.</para><para>Once iteration terminates, the caller is responsible for releasing API-allocated resources with <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref></para><para>If you expect the number of entries to be very small, you might consider using <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null-terminated UTF-8 string representing the tag on which iteration is requested</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an uninitialized <ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1gad00591559b223acc6eb0579b26acd489" kindref="member">qdb_tag_iterator_next</ref>, <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1gad00591559b223acc6eb0579b26acd489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_tag_iterator_next</definition>
        <argsstring>(qdb_const_tag_iterator_t *iterator)</argsstring>
        <name>qdb_tag_iterator_next</name>
        <param>
          <type><ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Advance a previously initialized iterator to the next entry. </para>        </briefdescription>
        <detaileddescription>
<para>The order in which iteration occurs is unspecified, but entries matching a tag will never appear twice.</para><para>Only forward iteration is currently supported.</para><para>Once iteration terminates, the caller is responsible for releasing API-allocated resources with <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref></para><para>If you expect the number of entries to be very small, you might consider using <ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized <ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga49f4349a3a0298ddef1a193f7704e4bf" kindref="member">qdb_get_tagged</ref>, <ref refid="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" kindref="member">qdb_tag_iterator_begin</ref>, <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__attr_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_tag_iterator_close</definition>
        <argsstring>(qdb_const_tag_iterator_t *iterator)</argsstring>
        <name>qdb_tag_iterator_close</name>
        <param>
          <type><ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Releases all API-allocated resources during a previous iteration. </para>        </briefdescription>
        <detaileddescription>
<para>Once iteration terminates, the caller is responsible for releasing API-allocated resources with <ref refid="group__tag_1ga984b421bc7c89bfbd62a1ceeb8fa61e1" kindref="member">qdb_tag_iterator_close</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an initialized <ref refid="structqdb__const__tag__iterator__t" kindref="compound">qdb_const_tag_iterator_t</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="group__error_1gab1b09622035af18ab20ed4fd3b61dd46" kindref="member">qdb_error_t</ref> code indicating success or failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__tag_1ga0f668af01c9168d82226f5e22c9c64f1" kindref="member">qdb_tag_iterator_begin</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qdb/tag.h" line="375" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
