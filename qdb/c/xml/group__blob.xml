<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__blob" kind="group">
    <compoundname>blob</compoundname>
    <title>Binary large objects (blob) operations</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__blob_1gab97cf9972c4cbb79e3ed0ed4afc8c3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_get_noalloc</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, void *content, qdb_size_t *content_length)</argsstring>
        <name>qdb_blob_get_noalloc</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
<para>Retrieves an entry&apos;s content from the quasardb server. The caller is responsible for allocating and freeing the provided buffer. </para>        </briefdescription>
        <detaileddescription>
<para>If the entry does not exist, the function will fail and return qdb_e_alias_not_found.</para><para>If the buffer is not large enough to hold the data, the function will fail and return qdb_e_buffer_too_small. content_length will nevertheless be updated with entry size so that the caller may resize its buffer and try again.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an user allocated buffer that will receive the entry&apos;s content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a qdb_size_t initialized with the length of the destination buffer, in bytes. It will be updated with the length of the retrieved content, even if the buffer is not large enough to hold all the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1ga79619e400997cf67c7f213fbcccd88c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_get</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void **content, qdb_size_t *content_length)</argsstring>
        <name>qdb_blob_get</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
<para>Retrieves an entry&apos;s content from the quasardb server. </para>        </briefdescription>
        <detaileddescription>
<para>If the entry does not exist, the function will fail and return qdb_e_alias_not_found.</para><para>The function will allocate a buffer large enough to hold the entry&apos;s content. This buffer must be released by the caller with a call to <ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer()</ref>.</para><para>If the buffer is not large enough to hold the data, the function will fail and return qdb_e_buffer_too_small. content_length will nevertheless be updated with entry size so that the caller may resize its buffer and try again.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer that will be set to a function-allocated buffer holding the entry&apos;s content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a qdb_size_t that will be set to the content&apos;s size, in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1gae57e1e36681a5326e36b4c93f5542d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_get_and_remove</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void **content, qdb_size_t *content_length)</argsstring>
        <name>qdb_blob_get_and_remove</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
<para>Atomically gets an entry from the quasardb server and removes it. </para>        </briefdescription>
        <detaileddescription>
<para>If the entry does not exist, the function will fail and return qdb_e_alias_not_found.</para><para>The function will allocate a buffer large enough to hold the entry&apos;s content. This buffer must be released by the caller with a call to <ref refid="group__client_1gab8d186d33a31fa0004c1102b76dc50d5" kindref="member">qdb_free_buffer()</ref>.</para><para>If the buffer is not large enough to hold the data, the function will fail and return qdb_e_buffer_too_small. content_length will nevertheless be updated with entry size so that the caller may resize its buffer and try again.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer that will be set to a function-allocated buffer holding the entry&apos;s content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a qdb_size_t that will be set to the content&apos;s size, in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1ga582970df269731ad63f475762cace662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_put</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void *content, qdb_size_t content_length, qdb_time_t expiry_time)</argsstring>
        <name>qdb_blob_put</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>content_length</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>Creates a new entry and sets its content to the provided blob. </para>        </briefdescription>
        <detaileddescription>
<para>If the entry already exists the function will fail and will return qdb_e_alias_already_exists.</para><para>Keys beginning with the string &quot;qdb&quot; are reserved and cannot be added to the cluster.</para><para>You can specify an expiry or use qdb_never_expires if you don&apos;t want the entry to expire.</para><para>There is no arbitrary limit to the size of blobs. To operate on entries that do not fit in RAM, consider using streams.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer with the blob content </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional absolute expiry time expressed in UTC UNIX epoch. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1gaa8f0eb0d63f51d7c945626a41cb984c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_update</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void *content, qdb_size_t content_length, qdb_time_t expiry_time)</argsstring>
        <name>qdb_blob_update</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>content_length</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>Creates or updates an entry and sets its content to the provided blob. </para>        </briefdescription>
        <detaileddescription>
<para>If the entry already exists the function will create the entry.</para><para>Keys beginning with the string &quot;qdb&quot; are reserved and cannot be added to the cluster.</para><para>You can specify an expiry or use qdb_never_expires if you don&apos;t want the entry to expire.</para><para>There is no arbitrary limit to the size of blobs. To operate on entries that do not fit in RAM, consider using streams.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer with the blob content </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional absolute expiry time expressed in UTC UNIX epoch. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1ga21ee155ef354810816c3bc2387d8664e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_reserved_blob_merge</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void *content, qdb_size_t content_length, qdb_size_t offset, int truncate, qdb_time_t expiry_time)</argsstring>
        <name>qdb_reserved_blob_merge</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>content_length</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>truncate</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <briefdescription>
<para>This function is reserved for internal use and its usage is discouraged. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the content to merge </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset at which merge content </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>truncate</parametername>
</parameternamelist>
<parameterdescription>
<para>1 the entry will be truncated at the end of the new buffer 0 the original content will be preserved </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional absolute expiry time expressed in UTC UNIX epoch. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1gad2ac5b09a51722c08bda77eaff228e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_get_and_update</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void *update_content, qdb_size_t update_content_length, qdb_time_t expiry_time, const void **get_content, qdb_size_t *get_content_length)</argsstring>
        <name>qdb_blob_get_and_update</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>update_content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>update_content_length</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>get_content</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>get_content_length</declname>
        </param>
        <briefdescription>
<para>Atomically gets and updates (in this order) the entry on the quasardb server. </para>        </briefdescription>
        <detaileddescription>
<para>The entry must already exist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update_content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer with the new blob content </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update_content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional absolute expiry time expressed in UTC UNIX epoch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_content</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer to an API-allocated buffer holding the entry content, before the update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_content_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a qdb_size_t that will be set to the content&apos;s size, in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1gac15e696f07b3099e8390fdf7acb3352f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_compare_and_swap</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void *new_value, qdb_size_t new_value_length, const void *comparand, qdb_size_t comparand_length, qdb_time_t expiry_time, const void **original_value, qdb_size_t *original_value_length)</argsstring>
        <name>qdb_blob_compare_and_swap</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>new_value_length</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>comparand</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>comparand_length</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga4745ed10b405291a321ec7150368a4b1" kindref="member">qdb_time_t</ref></type>
          <declname>expiry_time</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>original_value</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref> *</type>
          <declname>original_value_length</declname>
        </param>
        <briefdescription>
<para>Atomically compares the entry with comparand and updates it to new_value if, and only if, they match. </para>        </briefdescription>
        <detaileddescription>
<para>The function always returns the original value of the entry.</para><para>The entry must already exist.</para><para>Removal will occur if and only if the content of the entry matches bit for bit the content of the comparand buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer that represents the entry&apos;s content to be updated to the server in case of match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_value_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comparand</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer that represents the entry&apos;s content to be compared to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comparand_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_time</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional absolute expiry time expressed in UTC UNIX epoch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>original_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer that will be set to a function-allocated buffer holding the entry&apos;s original content, before the update, if any. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>original_value_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a qdb_size_t that will be set to the content&apos;s size, in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__blob_1gaeefdb8cfb156ed9fdf3a9859a8bfb8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__client_1ga008cbf050a89152ec67d33e534cd3012" kindref="member">QDB_API_LINKAGE</ref> <ref refid="group__error_1ga365e768c3ca0f6387d8798eb98c40443" kindref="member">qdb_error_t</ref></type>
        <definition>QDB_API_LINKAGE qdb_error_t qdb_blob_remove_if</definition>
        <argsstring>(qdb_handle_t handle, const char *alias, const void *comparand, qdb_size_t comparand_length)</argsstring>
        <name>qdb_blob_remove_if</name>
        <param>
          <type><ref refid="group__client_1ga720fb72da4197685cc354214e96796c1" kindref="member">qdb_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>comparand</declname>
        </param>
        <param>
          <type><ref refid="group__client_1ga2b6f368592c49501d41ec2330b964147" kindref="member">qdb_size_t</ref></type>
          <declname>comparand_length</declname>
        </param>
        <briefdescription>
<para>Atomically removes the entry on the server if the content matches. </para>        </briefdescription>
        <detaileddescription>
<para>The entry must already exist.</para><para>Removal will occur if and only if the content of the entry matches bit for bit the content of the comparand buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handle previously initialized by <ref refid="group__client_1gaa86900c81459a8d60b9b7b042371fa1e" kindref="member">qdb_open</ref> or <ref refid="group__client_1gab7a783a4a0cc73211ad96b9685f2c67e" kindref="member">qdb_open_tcp</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a null terminated UTF-8 string representing the alias of the entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comparand</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer to use a comparand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comparand_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer, in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A qdb_error_t code indicating success or failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/sources/quasardb/qdb/api/include/qdb/blob.h" line="306" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
